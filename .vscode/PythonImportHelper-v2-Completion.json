[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "validate_unit_selection",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def validate_unit_selection():\n    \"\"\"Check if a unit has been selected\"\"\"\n    return st.session_state.selected_unit is not None\ndef validate_parameters():\n    \"\"\"Check if all parameters have realistic (non-zero) values\"\"\"\n    zero_unit_params = []\n    zero_payload_params = []\n    # Check unit parameters (1-10)\n    for i in range(1, 11):\n        param_value = st.session_state[f'saved_number_{i}_0']",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "validate_parameters",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def validate_parameters():\n    \"\"\"Check if all parameters have realistic (non-zero) values\"\"\"\n    zero_unit_params = []\n    zero_payload_params = []\n    # Check unit parameters (1-10)\n    for i in range(1, 11):\n        param_value = st.session_state[f'saved_number_{i}_0']\n        if param_value == 0:\n            param_name = get_unit_parameter_name(i)\n            zero_unit_params.append(param_name)",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "get_unit_parameter_name",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def get_unit_parameter_name(index):\n    \"\"\"Get the display name for unit parameter\"\"\"\n    default_names = [\n        \"Equilibrium stroke position [m]\",\n        \"Force parameter [Te]\", \n        \"Mass parameter [m]\",\n        \"Force parameter 2 [Te]\",\n        \"Cross-sectional area [m²]\",\n        \"Gas volume [m³]\",\n        \"Length parameter 1 [m]\",",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "get_payload_parameter_name",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def get_payload_parameter_name(index):\n    \"\"\"Get the display name for payload parameter\"\"\"\n    default_names = [\n        \"Available lifting height [m]\",\n        \"Payload weight in air [Te]\",\n        \"Weight of slings [Te]\",\n        \"Parameter 4 [Te]\",\n        \"Cross-sectional area [m²]\",\n        \"Volume parameter [m³]\",\n        \"Length parameter 1 [m]\",",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_unit_overview",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_unit_overview():\n    \"\"\"Display the selected unit overview\"\"\"\n    st.markdown(\"### Selected unit\")\n    col_overview1, col_overview2 = st.columns([1, 1])\n    if isinstance(st.session_state.selected_unit, tuple):\n        unit_type_display = st.session_state.selected_unit[0]\n        unit_id_display = st.session_state.selected_unit[1]\n        unit_category = st.session_state.selected_unit_type\n        with col_overview1:\n            st.success(f\"**{unit_category}** - {unit_type_display}\")",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_unit_parameters",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_unit_parameters():\n    \"\"\"Display unit parameters in expandable table\"\"\"\n    with st.expander(\"**Unit Parameters**\", expanded=False):\n        unit_params = []\n        for i in range(1, 11):\n            param_value = st.session_state[f'saved_number_{i}_0']\n            param_name = get_unit_parameter_name(i)\n            unit_params.append([param_name, f\"{param_value}\"])\n        unit_params_df = pd.DataFrame(unit_params, columns=[\"Parameter\", \"Value\"])\n        st.dataframe(unit_params_df, use_container_width=True, hide_index=True, height=450)",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_payload_parameters",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_payload_parameters():\n    \"\"\"Display payload parameters in expandable table\"\"\"\n    with st.expander(\"**Payload Parameters**\", expanded=False):\n        payload_params = []\n        for i in range(1, 11):\n            param_value = st.session_state[f'saved_number_{i}_1']\n            param_name = get_payload_parameter_name(i)\n            payload_params.append([param_name, f\"{param_value}\"])\n        payload_params_df = pd.DataFrame(payload_params, columns=[\"Parameter\", \"Value\"])\n        st.dataframe(payload_params_df, use_container_width=True, hide_index=True, height=450)",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_special_functions",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_special_functions():\n    \"\"\"Display special functions configuration\"\"\"\n    with st.expander(\"**Special Functions**\", expanded=False):\n        unit_capabilities = st.session_state['unit_capabilities']\n        if any(unit_capabilities.values()):\n            special_function_params = []\n            # Rod Functions Section\n            special_function_params.append([\"**Rod Functions**\", \"\"])\n            # Rod Orientation\n            if unit_capabilities[\"rod_orientation\"]:",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_selected_results",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_selected_results():\n    \"\"\"Display selected results configuration\"\"\"\n    with st.expander(\"**Selected Results**\", expanded=False):\n        customized_results = st.session_state['customized_results']\n        if customized_results:\n            all_results = []\n            # Body Results\n            body_results = st.session_state['selected_body_results']\n            if body_results:\n                for result in body_results:",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "generate_config_file",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def generate_config_file():\n    \"\"\"Generate and provide download for configuration file\"\"\"\n    config = configparser.ConfigParser()\n    from datetime import datetime\n    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    version = st.session_state['version']\n    # Unit configuration\n    config[\"Unit\"] = {\n        \"category\": st.session_state.selected_unit_type,\n        \"unit_type\": st.session_state.selected_unit[0] if isinstance(st.session_state.selected_unit, tuple) else str(st.session_state.selected_unit),",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_validation_errors",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_validation_errors(zero_unit_params, zero_payload_params):\n    \"\"\"Display parameter validation error messages\"\"\"\n    st.error(\"❌ **Configuration Incomplete** - Some parameters are set to zero.\")\n    if zero_unit_params:\n        st.error(f\"**Unit Parameters with zero values:** {', '.join(zero_unit_params)}\")\n    if zero_payload_params:\n        st.error(f\"**Payload Parameters with zero values:** {', '.join(zero_payload_params)}\")\n    st.info(\"Please go to page: **Configure a unit -> Parameter Inputs** and enter realistic values for all parameters.\")\ndef display_navigation_buttons():\n    \"\"\"Display navigation and session management buttons\"\"\"",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "display_navigation_buttons",
        "kind": 2,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "def display_navigation_buttons():\n    \"\"\"Display navigation and session management buttons\"\"\"\n    st.markdown(\"---\")\n    st.markdown(\"### **Session Management**\")\n    col_nav1, col_nav2, col_nav3, col_nav4, col_nav5 = st.columns([1, 1, 1, 1, 1])\n    with col_nav1:\n        if st.button(\"← ⚙️ **Back to Unit configuration**\", use_container_width=True, type=\"secondary\"):\n            st.switch_page(\"pages/page_unit.py\")\n    with col_nav2:\n        if st.button(\"← 📄 **Back to Select Results**\", use_container_width=True, type=\"secondary\"):",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "unit_selected",
        "kind": 5,
        "importPath": "pages.page_export",
        "description": "pages.page_export",
        "peekOfCode": "unit_selected = validate_unit_selection()\nif not unit_selected:\n    # No unit selected - show start message\n    st.warning(\"⚠️ **No Configuration Found** - Please complete the unit selection and parameter configuration first.\")\n    col_start1, col_start2, col_start3 = st.columns([1, 1, 1])\n    with col_start2:\n        if st.button(\"**Start Configuration**\", use_container_width=True, type=\"primary\"):\n            st.switch_page(\"pages/page_unit.py\")\nelse:\n    # Step 2: Unit selected - validate parameters",
        "detail": "pages.page_export",
        "documentation": {}
    },
    {
        "label": "default_customized_body_results",
        "kind": 5,
        "importPath": "pages.page_results",
        "description": "pages.page_results",
        "peekOfCode": "default_customized_body_results = [\"Force (F_fb)\", \"Force Active (F_active)\"]\ndefault_customized_rod_results = [\"Setpoint (F_sp_CT)\",  \"S-curve (S_curve_x)\"]\ndefault_customized_payload_results = [\"v_payload_m\", \"acc_payload_MRU\"]\n# Initialize default selections in session state if they don't exist\nif 'selected_body_results' not in st.session_state:\n    st.session_state.selected_body_results = default_customized_body_results\nif 'selected_rod_results' not in st.session_state:\n    st.session_state.selected_rod_results = default_customized_rod_results\nif 'selected_payload_results' not in st.session_state:\n    st.session_state.selected_payload_results = default_customized_payload_results",
        "detail": "pages.page_results",
        "documentation": {}
    },
    {
        "label": "default_customized_rod_results",
        "kind": 5,
        "importPath": "pages.page_results",
        "description": "pages.page_results",
        "peekOfCode": "default_customized_rod_results = [\"Setpoint (F_sp_CT)\",  \"S-curve (S_curve_x)\"]\ndefault_customized_payload_results = [\"v_payload_m\", \"acc_payload_MRU\"]\n# Initialize default selections in session state if they don't exist\nif 'selected_body_results' not in st.session_state:\n    st.session_state.selected_body_results = default_customized_body_results\nif 'selected_rod_results' not in st.session_state:\n    st.session_state.selected_rod_results = default_customized_rod_results\nif 'selected_payload_results' not in st.session_state:\n    st.session_state.selected_payload_results = default_customized_payload_results\nif 'customized_results' not in st.session_state:",
        "detail": "pages.page_results",
        "documentation": {}
    },
    {
        "label": "default_customized_payload_results",
        "kind": 5,
        "importPath": "pages.page_results",
        "description": "pages.page_results",
        "peekOfCode": "default_customized_payload_results = [\"v_payload_m\", \"acc_payload_MRU\"]\n# Initialize default selections in session state if they don't exist\nif 'selected_body_results' not in st.session_state:\n    st.session_state.selected_body_results = default_customized_body_results\nif 'selected_rod_results' not in st.session_state:\n    st.session_state.selected_rod_results = default_customized_rod_results\nif 'selected_payload_results' not in st.session_state:\n    st.session_state.selected_payload_results = default_customized_payload_results\nif 'customized_results' not in st.session_state:\n    st.session_state.customized_results = False",
        "detail": "pages.page_results",
        "documentation": {}
    },
    {
        "label": "rod_function_defaults",
        "kind": 5,
        "importPath": "pages.page_results",
        "description": "pages.page_results",
        "peekOfCode": "rod_function_defaults = {\n    'check_box_rod_lock': False,\n    'rod_lock_depth': 10.0,\n    'rod_lock_operation': 'Lifting Down',\n    'rod_lock_mode': 'Auto Lock at Depth',\n    'lock_hold_time': 5.0,\n    'lock_speed': 0.5,\n    'rod_orientation': 'Rod Down (Standard)'\n}\nfor key, default_value in rod_function_defaults.items():",
        "detail": "pages.page_results",
        "documentation": {}
    },
    {
        "label": "results_index",
        "kind": 5,
        "importPath": "pages.page_results",
        "description": "pages.page_results",
        "peekOfCode": "results_index = 1 if st.session_state.customized_results else 0\ncol1, col2 = st.columns([1, 2])\nwith col1:\n    st.markdown(\"#### Select the results to show in OrcaFlex:\")\n    selection_box_results = st.selectbox(\"OrcaFlex defaults\", options=[\"OrcaFlex defaults\", \"Customized\"], key=\"results_selectbox\", index=results_index)\nwith col2:\n    image = Image.open(os.path.join('figures', 'SafelinkTabWiFi.png'))\n    col1, col2 = st.columns([1, 1])\n    with col2:\n        st.image(image, width=300)    ",
        "detail": "pages.page_results",
        "documentation": {}
    },
    {
        "label": "is_ready",
        "kind": 5,
        "importPath": "pages.page_results",
        "description": "pages.page_results",
        "peekOfCode": "is_ready = (st.session_state.selected_unit and \n            st.session_state.selected_unit != \"None\")\nwith col_next_2:\n    if is_ready:\n        # Check if any custom results are selected\n        if selection_box_results == \"Customized\":\n            # Check if any results are selected in customized mode\n            has_custom_results = (\n                len(st.session_state.selected_body_results) > 0 or\n                len(st.session_state.selected_rod_results) > 0 or",
        "detail": "pages.page_results",
        "documentation": {}
    },
    {
        "label": "auto_save_param",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def auto_save_param(param_name):\n    \"\"\"Auto-save parameter when it changes\"\"\"\n    if param_name in st.session_state:\n        st.session_state[f\"saved_{param_name}\"] = st.session_state[param_name]\n# page content\nst.markdown(\"# Unit Selection and Configuration\")\nst.divider()\n# Import safelink units from Excel file\n@st.cache_data\ndef load_unit_data():",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "load_unit_data",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def load_unit_data():\n    \"\"\"Load and process unit data from Excel file\"\"\"\n    try:\n        df = pd.read_excel( os.path.join('materials', 'Safelink_units.xlsx'), header=0)\n        df.sort_values(by=\"Unit Type\", inplace=True)\n        df.reset_index(drop=True, inplace=True)\n        return df\n    except Exception as e:\n        st.error(f\"Error loading unit data: {e}\")\n        return pd.DataFrame()",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "get_unit_image",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def get_unit_image(unit_serial, unit_type):\n    \"\"\"\n    Get the appropriate image for the selected unit.\n    First tries to load unit-specific image, falls back to default category image.\n    \"\"\"\n    # Try to get unit serial from tuple (unit_type, unit_id)\n    if isinstance(unit_serial, tuple) and len(unit_serial) >= 2:\n        actual_serial = unit_serial[1]  # Get the Unit ID from the tuple\n    else:\n        actual_serial = unit_serial",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "get_selection_index",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def get_selection_index(units_list, session_unit):\n    if session_unit and isinstance(session_unit, tuple):\n        for i, unit in enumerate(units_list):\n            if isinstance(unit, tuple) and unit[1] == session_unit[1]:  # Compare Unit IDs\n                return i\n    return 0  # Default to first item instead of \"None\"\n# Determine which category the currently selected unit belongs to\ndef get_unit_type(session_unit):\n    if session_unit and isinstance(session_unit, tuple):\n        if any(\"IAHC\" in unit[0] for unit in IAHC_units if isinstance(unit, tuple) and unit[1] == session_unit[1]):",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "get_unit_type",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def get_unit_type(session_unit):\n    if session_unit and isinstance(session_unit, tuple):\n        if any(\"IAHC\" in unit[0] for unit in IAHC_units if isinstance(unit, tuple) and unit[1] == session_unit[1]):\n            return \"IAHC\"\n        elif any(\"Poseidon\" in unit[0] for unit in PHC_units if isinstance(unit, tuple) and unit[1] == session_unit[1]):\n            return \"PHC\"\n        else:\n            return \"Shock absorber\"\n    # If no unit selected, default to the first available category\n    if IAHC_units:",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "get_unit_capabilities",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def get_unit_capabilities(selected_unit, unit_type):\n    \"\"\"Determine which special features are available for the selected unit\"\"\"\n    if not selected_unit:\n        return {\"ahc\": False, \"quick_lifting\": False, \"constant_tension\": False, \"rod_lock\": False, \"rod_orientation\": True}\n    # IAHC units support all features including rod functions\n    if unit_type == \"IAHC\":\n        return {\"ahc\": True, \"quick_lifting\": True, \"constant_tension\": True, \"rod_lock\": True, \"rod_orientation\": True}\n    # PHC units support most features including rod functions\n    elif unit_type == \"PHC\":\n        return {\"ahc\": False, \"quick_lifting\": True, \"constant_tension\": True, \"rod_lock\": True, \"rod_orientation\": True}",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "format_unit_display",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def format_unit_display(unit):\n    if isinstance(unit, tuple) and len(unit) == 2:\n        unit_type, unit_id = unit\n        return f\"{unit_type:<30} │ {unit_id}\"\n    else:\n        return str(unit)\ndef get_unit_specifications(unit_data):\n    \"\"\"Get specifications for the selected unit from Excel data\"\"\"\n    if not unit_data or not isinstance(unit_data, tuple):\n        return None",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "get_unit_specifications",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def get_unit_specifications(unit_data):\n    \"\"\"Get specifications for the selected unit from Excel data\"\"\"\n    if not unit_data or not isinstance(unit_data, tuple):\n        return None\n    unit_type_name, unit_id = unit_data\n    # Look up specifications from the loaded Excel data\n    return unit_specs_lookup[unit_id]\nst.markdown(\"### 1. Unit Selection\")\nst.markdown(\"Select the unit to be used in your lifting simulations/operations.\")\nst.write(\"Contact [Safelink AS]() and consult  [help documentation](http://safelink.no) for detailed unit specifications.\")",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_constant_tension",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_constant_tension():\n    pass\ndef update_tension_params():\n    pass\ndef update_quick_lifting():\n    pass\ndef update_quick_params():\n    pass\ndef update_active_heave():\n    pass",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_tension_params",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_tension_params():\n    pass\ndef update_quick_lifting():\n    pass\ndef update_quick_params():\n    pass\ndef update_active_heave():\n    pass\ndef update_heave_params():\n    pass",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_quick_lifting",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_quick_lifting():\n    pass\ndef update_quick_params():\n    pass\ndef update_active_heave():\n    pass\ndef update_heave_params():\n    pass\ndef update_rod_lock():\n    pass",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_quick_params",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_quick_params():\n    pass\ndef update_active_heave():\n    pass\ndef update_heave_params():\n    pass\ndef update_rod_lock():\n    pass\ndef update_rod_lock_params():\n    pass",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_active_heave",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_active_heave():\n    pass\ndef update_heave_params():\n    pass\ndef update_rod_lock():\n    pass\ndef update_rod_lock_params():\n    pass\ndef update_rod_orientation():\n    pass",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_heave_params",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_heave_params():\n    pass\ndef update_rod_lock():\n    pass\ndef update_rod_lock_params():\n    pass\ndef update_rod_orientation():\n    pass\nif any(unit_capabilities.values()):\n    current_unit_type = st.session_state['selected_unit_type']    ",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_rod_lock",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_rod_lock():\n    pass\ndef update_rod_lock_params():\n    pass\ndef update_rod_orientation():\n    pass\nif any(unit_capabilities.values()):\n    current_unit_type = st.session_state['selected_unit_type']    \n    # Create tabs for better organization with more features\n    tab1, tab2 = st.tabs([ \"Control Modes\", \"System Settings\"])",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_rod_lock_params",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_rod_lock_params():\n    pass\ndef update_rod_orientation():\n    pass\nif any(unit_capabilities.values()):\n    current_unit_type = st.session_state['selected_unit_type']    \n    # Create tabs for better organization with more features\n    tab1, tab2 = st.tabs([ \"Control Modes\", \"System Settings\"])\n    with tab1:\n        # Create three columns for the control features",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "update_rod_orientation",
        "kind": 2,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "def update_rod_orientation():\n    pass\nif any(unit_capabilities.values()):\n    current_unit_type = st.session_state['selected_unit_type']    \n    # Create tabs for better organization with more features\n    tab1, tab2 = st.tabs([ \"Control Modes\", \"System Settings\"])\n    with tab1:\n        # Create three columns for the control features\n        col_func1, col_func2, col_func3, col_func4 = st.columns(4)\n        # Quick Lifting Mode",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "safelink_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "safelink_units = load_unit_data()\n# Categorize units based on actual data\niahc_units = safelink_units[safelink_units['Unit Type'].str.contains('IAHC', case=False, na=False)]\nposeidon_units = safelink_units[safelink_units['Unit Type'].str.contains('Poseidon', case=False, na=False)]\nother_units = safelink_units[~safelink_units['Unit Type'].str.contains('IAHC|Poseidon', case=False, na=False)]\n# Create unit lists with tuples (Unit Type, Unit ID) - WITHOUT \"None\" options\nIAHC_units = [unit for unit in zip(iahc_units['Unit Type'].tolist(), iahc_units['Unit ID'].tolist())]\nPHC_units = [unit for unit in zip(poseidon_units['Unit Type'].tolist(), poseidon_units['Unit ID'].tolist())]\nshock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "iahc_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "iahc_units = safelink_units[safelink_units['Unit Type'].str.contains('IAHC', case=False, na=False)]\nposeidon_units = safelink_units[safelink_units['Unit Type'].str.contains('Poseidon', case=False, na=False)]\nother_units = safelink_units[~safelink_units['Unit Type'].str.contains('IAHC|Poseidon', case=False, na=False)]\n# Create unit lists with tuples (Unit Type, Unit ID) - WITHOUT \"None\" options\nIAHC_units = [unit for unit in zip(iahc_units['Unit Type'].tolist(), iahc_units['Unit ID'].tolist())]\nPHC_units = [unit for unit in zip(poseidon_units['Unit Type'].tolist(), poseidon_units['Unit ID'].tolist())]\nshock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications\nunit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "poseidon_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "poseidon_units = safelink_units[safelink_units['Unit Type'].str.contains('Poseidon', case=False, na=False)]\nother_units = safelink_units[~safelink_units['Unit Type'].str.contains('IAHC|Poseidon', case=False, na=False)]\n# Create unit lists with tuples (Unit Type, Unit ID) - WITHOUT \"None\" options\nIAHC_units = [unit for unit in zip(iahc_units['Unit Type'].tolist(), iahc_units['Unit ID'].tolist())]\nPHC_units = [unit for unit in zip(poseidon_units['Unit Type'].tolist(), poseidon_units['Unit ID'].tolist())]\nshock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications\nunit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():\n    unit_specs_lookup[row['Unit ID']] = {",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "other_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "other_units = safelink_units[~safelink_units['Unit Type'].str.contains('IAHC|Poseidon', case=False, na=False)]\n# Create unit lists with tuples (Unit Type, Unit ID) - WITHOUT \"None\" options\nIAHC_units = [unit for unit in zip(iahc_units['Unit Type'].tolist(), iahc_units['Unit ID'].tolist())]\nPHC_units = [unit for unit in zip(poseidon_units['Unit Type'].tolist(), poseidon_units['Unit ID'].tolist())]\nshock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications\nunit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():\n    unit_specs_lookup[row['Unit ID']] = {\n        'stroke': f\"{row['stroke [m]']} m\",",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "IAHC_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "IAHC_units = [unit for unit in zip(iahc_units['Unit Type'].tolist(), iahc_units['Unit ID'].tolist())]\nPHC_units = [unit for unit in zip(poseidon_units['Unit Type'].tolist(), poseidon_units['Unit ID'].tolist())]\nshock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications\nunit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():\n    unit_specs_lookup[row['Unit ID']] = {\n        'stroke': f\"{row['stroke [m]']} m\",\n        'overall_size': row['overall size [L/W/H, m]'],\n        'design_pressure': f\"{row['design pressure [bar]']} bar\",",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "PHC_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "PHC_units = [unit for unit in zip(poseidon_units['Unit Type'].tolist(), poseidon_units['Unit ID'].tolist())]\nshock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications\nunit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():\n    unit_specs_lookup[row['Unit ID']] = {\n        'stroke': f\"{row['stroke [m]']} m\",\n        'overall_size': row['overall size [L/W/H, m]'],\n        'design_pressure': f\"{row['design pressure [bar]']} bar\",\n        'design_water_depth': f\"{row['design water depth [m]']} m\",",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "shock_absorber_units",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "shock_absorber_units = [unit for unit in zip(other_units['Unit Type'].tolist(), other_units['Unit ID'].tolist())]\n# Create a lookup dictionary for unit specifications\nunit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():\n    unit_specs_lookup[row['Unit ID']] = {\n        'stroke': f\"{row['stroke [m]']} m\",\n        'overall_size': row['overall size [L/W/H, m]'],\n        'design_pressure': f\"{row['design pressure [bar]']} bar\",\n        'design_water_depth': f\"{row['design water depth [m]']} m\",\n        'gas_volume': f\"{row['gas volume [m3 @ atm]']} m³\",",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "unit_specs_lookup",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "unit_specs_lookup = {}\nfor _, row in safelink_units.iterrows():\n    unit_specs_lookup[row['Unit ID']] = {\n        'stroke': f\"{row['stroke [m]']} m\",\n        'overall_size': row['overall size [L/W/H, m]'],\n        'design_pressure': f\"{row['design pressure [bar]']} bar\",\n        'design_water_depth': f\"{row['design water depth [m]']} m\",\n        'gas_volume': f\"{row['gas volume [m3 @ atm]']} m³\",\n        'weight': f\"{row['weight [kg]']/1000:.1f} tonnes\",  # Convert kg to tonnes\n        'SWL': f\"{row['SWL [Te]']:.1f} Te\", ",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "default_images",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "default_images = {\n    \"IAHC\": os.path.join('figures', 'Blade rack (3).jpg'),\n    \"PHC\":  os.path.join('figures', 'DSC00623.jpg'),\n    \"Shock absorber\": os.path.join('figures', 'PXL_20250511_123654514.jpg'),\n}\ndef get_unit_image(unit_serial, unit_type):\n    \"\"\"\n    Get the appropriate image for the selected unit.\n    First tries to load unit-specific image, falls back to default category image.\n    \"\"\"",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "session_defaults",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "session_defaults = {\n    # Existing features\n    'check_box_constant_tension': False,\n    'tension_start_time': 5.0,\n    'tension_tolerance': 5.0,\n    'check_box_quicklifting': False,\n    'quick_start_time': 10.0,\n    'quick_acceleration_limit': 0.5,\n    'check_box_active_heave_compensation': False,\n    'heave_start_time': 15.0,",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "current_type",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "current_type = get_unit_type(st.session_state['selected_unit'])\ncategory_index = [\"IAHC\", \"PHC\", \"Shock absorber\"].index(current_type)\n# Unit formatter function\ndef format_unit_display(unit):\n    if isinstance(unit, tuple) and len(unit) == 2:\n        unit_type, unit_id = unit\n        return f\"{unit_type:<30} │ {unit_id}\"\n    else:\n        return str(unit)\ndef get_unit_specifications(unit_data):",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "category_index",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "category_index = [\"IAHC\", \"PHC\", \"Shock absorber\"].index(current_type)\n# Unit formatter function\ndef format_unit_display(unit):\n    if isinstance(unit, tuple) and len(unit) == 2:\n        unit_type, unit_id = unit\n        return f\"{unit_type:<30} │ {unit_id}\"\n    else:\n        return str(unit)\ndef get_unit_specifications(unit_data):\n    \"\"\"Get specifications for the selected unit from Excel data\"\"\"",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "unit_capabilities",
        "kind": 5,
        "importPath": "pages.page_unit",
        "description": "pages.page_unit",
        "peekOfCode": "unit_capabilities = st.session_state.unit_capabilities = get_unit_capabilities(st.session_state.selected_unit, st.session_state.selected_unit_type)\n# Define callback functions for immediate state updates\ndef update_constant_tension():\n    pass\ndef update_tension_params():\n    pass\ndef update_quick_lifting():\n    pass\ndef update_quick_params():\n    pass",
        "detail": "pages.page_unit",
        "documentation": {}
    },
    {
        "label": "hide_welcome_image",
        "kind": 2,
        "importPath": "pages.page_welcome",
        "description": "pages.page_welcome",
        "peekOfCode": "def hide_welcome_image():\n    st.session_state.image_welcome = False\ndef show_login_dialog():\n    st.session_state.show_login_dialog = True\ndef hide_login_dialog():\n    st.session_state.show_login_dialog = False\ndef handle_login(username, password):\n    # Simple authentication - in production, use proper authentication\n    valid_users = {\n        \"admin\": \"password123\",",
        "detail": "pages.page_welcome",
        "documentation": {}
    },
    {
        "label": "show_login_dialog",
        "kind": 2,
        "importPath": "pages.page_welcome",
        "description": "pages.page_welcome",
        "peekOfCode": "def show_login_dialog():\n    st.session_state.show_login_dialog = True\ndef hide_login_dialog():\n    st.session_state.show_login_dialog = False\ndef handle_login(username, password):\n    # Simple authentication - in production, use proper authentication\n    valid_users = {\n        \"admin\": \"password123\",\n        \"user\": \"user123\",\n        \"demo\": \"demo\"",
        "detail": "pages.page_welcome",
        "documentation": {}
    },
    {
        "label": "hide_login_dialog",
        "kind": 2,
        "importPath": "pages.page_welcome",
        "description": "pages.page_welcome",
        "peekOfCode": "def hide_login_dialog():\n    st.session_state.show_login_dialog = False\ndef handle_login(username, password):\n    # Simple authentication - in production, use proper authentication\n    valid_users = {\n        \"admin\": \"password123\",\n        \"user\": \"user123\",\n        \"demo\": \"demo\"\n    }\n    if username in valid_users and valid_users[username] == password:",
        "detail": "pages.page_welcome",
        "documentation": {}
    },
    {
        "label": "handle_login",
        "kind": 2,
        "importPath": "pages.page_welcome",
        "description": "pages.page_welcome",
        "peekOfCode": "def handle_login(username, password):\n    # Simple authentication - in production, use proper authentication\n    valid_users = {\n        \"admin\": \"password123\",\n        \"user\": \"user123\",\n        \"demo\": \"demo\"\n    }\n    if username in valid_users and valid_users[username] == password:\n        st.session_state.logged_in = True\n        st.session_state.username = username",
        "detail": "pages.page_welcome",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "kind": 2,
        "importPath": "pages.page_welcome",
        "description": "pages.page_welcome",
        "peekOfCode": "def handle_logout():\n    st.session_state.logged_in = False\n    st.session_state.username = ''\n    st.session_state.show_login_dialog = False\n    st.success(\"Logged out successfully!\")\n    st.rerun()\n# Main page content\nimage = Image.open( os.path.join('figures', 'Safelink Logo Medium.png'))\ncol1, col2, col3 = st.columns([1, 1, 1])\nwith col2:",
        "detail": "pages.page_welcome",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "pages.page_welcome",
        "description": "pages.page_welcome",
        "peekOfCode": "image = Image.open( os.path.join('figures', 'Safelink Logo Medium.png'))\ncol1, col2, col3 = st.columns([1, 1, 1])\nwith col2:\n    st.image(image, width=1000)\n#%% Login/Logout section\nst.divider()\ncol_login1, col_login2, col_login3 = st.columns([3, 1, 3])\nwith col_login2:\n    if not st.session_state.logged_in:\n        if st.button(\"🔐 Login\", use_container_width=True, type=\"primary\"):",
        "detail": "pages.page_welcome",
        "documentation": {}
    },
    {
        "label": "handle_login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def handle_login(username, password):\n    \"\"\"Handle user authentication\"\"\"\n    # Simple authentication - in production, use proper authentication\n    valid_users = {\n        \"admin\": \"password123\",\n        \"user\": \"user123\",\n        \"demo\": \"demo\",\n        \"safelink\": \"safelink2025\"\n    }\n    if username in valid_users and valid_users[username] == password:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def handle_logout():\n    \"\"\"Handle user logout\"\"\"\n    st.session_state.logged_in = False\n    st.session_state.username = ''\n    st.session_state.show_login_dialog = True\n    st.rerun()\ndef show_login_screen():\n    \"\"\"Display the login screen\"\"\"\n    # Safelink logo\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "show_login_screen",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def show_login_screen():\n    \"\"\"Display the login screen\"\"\"\n    # Safelink logo\n    try:\n        image = Image.open(os.path.join('figures', 'Safelink Logo Medium.png'))\n        _, col2,_ = st.columns([1, 1, 1])\n        with col2:\n            st.image(image, width=800)\n    except:\n        st.title(\"🔧 Safelink OrcaFlex Configuration Tool\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "show_main_app",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def show_main_app():\n    \"\"\"Display the main application with navigation\"\"\"\n    # Add logout button in sidebar\n    with st.sidebar:\n        st.markdown(f\"**👤 Logged in as:** {st.session_state.username}\")\n        if st.button(\"🚪 Logout\", use_container_width=True):\n            handle_logout()\n        st.divider()\n    # Define pages only when authenticated\n    page_welcome = st.Page(\"pages/page_welcome.py\", title=\"Home\", icon=\"🏠\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "box_style",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "box_style = \"\"\"\n    <div style=\"\n        border: 2px solid #1f77b4;\n        border-radius: 10px;\n        padding: 1rem;\n        margin-bottom: 1rem;\n        background-color: #f9f9f9;\n    \">\n\"\"\"\n# Initialize session state variables for authentication",
        "detail": "main",
        "documentation": {}
    }
]